import { renderBlock } from './lib.js';
const userDataRequest = () => {
    const getUser = localStorage.getItem('defaultUser');
    let isUserData;
    if (getUser != (null || undefined)) {
        isUserData = true;
    }
    else {
        isUserData = false;
    }
    return Promise.resolve(isUserData);
};
const getUserData = (callback) => {
    userDataRequest()
        .then((isUserData) => {
        callback(null, isUserData);
    })
        .catch((error) => {
        callback(error);
    });
};
const callback = (error, isUserData) => {
    if (error == null && isUserData == true) {
        console.log('Read succesfully');
        const getUser = localStorage.getItem('defaultUser');
        const defaultUser = JSON.parse(getUser);
        return defaultUser;
    }
    else {
        console.error('Something went wrong', error);
    }
};
// Достаём избранное из local-storage. Я не придумал что тут вообще делать, поэтому просто сделал вывод в консоль
const getFavouritesAmount = () => {
    const getUserFaves = localStorage.getItem('userFaves');
    const userFaves = JSON.parse(getUserFaves);
    console.log(`У этого юзера в избранном ${userFaves} элементов`);
    return userFaves;
};
getUserData(callback);
getFavouritesAmount();
// Функция рендерися на основе содержимого local-storage
export const renderUserBlock = (user, faves) => {
    let favCaption;
    if (faves != undefined) {
        favCaption = faves;
    }
    else {
        favCaption = 'Ничего нет';
    }
    const hasFavItems = faves > 0 ? true : false;
    renderBlock('user-block', `
      <div class="header-container">
        <img class="avatar" src="/img/${user.avatarUrl}" alt="${user.name}"/>
        <div class="info">
          <p class="name">${user.name}</p>
          <p class="fav">
            <i class="heart-icon${hasFavItems ? ' active' : ' inactive'}"></i>${favCaption}
          </p>
        </div>
      </div>
    `);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91c2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFLdkMsTUFBTSxlQUFlLEdBQUcsR0FBc0IsRUFBRTtJQUM5QyxNQUFNLE9BQU8sR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ3BELElBQUksVUFBbUIsQ0FBQztJQUN4QixJQUFJLE9BQU8sSUFBSSxDQUFDLElBQUksSUFBSSxTQUFTLENBQUMsRUFBRTtRQUNsQyxVQUFVLEdBQUcsSUFBSSxDQUFDO0tBQ25CO1NBQU07UUFDTCxVQUFVLEdBQUcsS0FBSyxDQUFDO0tBQ3BCO0lBQ0QsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3JDLENBQUMsQ0FBQztBQUVGLE1BQU0sV0FBVyxHQUFHLENBQUMsUUFBMEQsRUFBUSxFQUFFO0lBQ3ZGLGVBQWUsRUFBRTtTQUNkLElBQUksQ0FBQyxDQUFDLFVBQVUsRUFBRSxFQUFFO1FBQ25CLFFBQVEsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDN0IsQ0FBQyxDQUFDO1NBQ0QsS0FBSyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7UUFDZixRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbEIsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUM7QUFFRixNQUFNLFFBQVEsR0FBd0IsQ0FBQyxLQUFLLEVBQUUsVUFBVSxFQUFlLEVBQUU7SUFDdkUsSUFBSSxLQUFLLElBQUksSUFBSSxJQUFJLFVBQVUsSUFBSSxJQUFJLEVBQUU7UUFDdkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQ2hDLE1BQU0sT0FBTyxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDcEQsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN4QyxPQUFPLFdBQVcsQ0FBQztLQUNwQjtTQUFNO1FBQ0wsT0FBTyxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsRUFBRSxLQUFLLENBQUMsQ0FBQztLQUM5QztBQUNILENBQUMsQ0FBQztBQUVGLGlIQUFpSDtBQUNqSCxNQUFNLG1CQUFtQixHQUFHLEdBQXFCLEVBQUU7SUFDakQsTUFBTSxZQUFZLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN2RCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzNDLE9BQU8sQ0FBQyxHQUFHLENBQUMsNkJBQTZCLFNBQVMsWUFBWSxDQUFDLENBQUM7SUFDaEUsT0FBTyxTQUFTLENBQUM7QUFDbkIsQ0FBQyxDQUFDO0FBRUYsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3RCLG1CQUFtQixFQUFFLENBQUM7QUFFdEIsd0RBQXdEO0FBQ3hELE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxDQUFDLElBQVUsRUFBRSxLQUF1QixFQUFRLEVBQUU7SUFDM0UsSUFBSSxVQUEyQixDQUFDO0lBQ2hDLElBQUksS0FBSyxJQUFJLFNBQVMsRUFBRTtRQUN0QixVQUFVLEdBQUcsS0FBSyxDQUFDO0tBQ3BCO1NBQU07UUFDTCxVQUFVLEdBQUcsWUFBWSxDQUFDO0tBQzNCO0lBQ0QsTUFBTSxXQUFXLEdBQVksS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDdEQsV0FBVyxDQUNULFlBQVksRUFDWjs7d0NBRW9DLElBQUksQ0FBQyxTQUFTLFVBQVUsSUFBSSxDQUFDLElBQUk7OzRCQUU3QyxJQUFJLENBQUMsSUFBSTs7a0NBRUgsV0FBVyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFdBQVcsU0FBUyxVQUFVOzs7O0tBSXJGLENBQ0YsQ0FBQztBQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlbmRlckJsb2NrIH0gZnJvbSAnLi9saWIuanMnO1xyXG5pbXBvcnQgeyB1c2VyIH0gZnJvbSAnLi9pbnRlcmZhY2VzLmpzJztcclxuaW1wb3J0IHsgZmF2b3VyaXRlc0Ftb3VudCB9IGZyb20gJy4vdHlwZXMuanMnO1xyXG5pbXBvcnQgeyBnZXRVc2VyRGF0YUNhbGxiYWNrIH0gZnJvbSAnLi9pbnRlcmZhY2VzLmpzJztcclxuXHJcbmNvbnN0IHVzZXJEYXRhUmVxdWVzdCA9ICgpOiBQcm9taXNlPGJvb2xlYW4+ICA9PiB7XHJcbiAgY29uc3QgZ2V0VXNlciA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdkZWZhdWx0VXNlcicpO1xyXG4gIGxldCBpc1VzZXJEYXRhOiBib29sZWFuO1xyXG4gIGlmIChnZXRVc2VyICE9IChudWxsIHx8IHVuZGVmaW5lZCkpIHtcclxuICAgIGlzVXNlckRhdGEgPSB0cnVlO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBpc1VzZXJEYXRhID0gZmFsc2U7XHJcbiAgfVxyXG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUoaXNVc2VyRGF0YSk7XHJcbn07XHJcblxyXG5jb25zdCBnZXRVc2VyRGF0YSA9IChjYWxsYmFjazogKGVycm9yPzogRXJyb3IsIGlzVXNlckRhdGE/OiBib29sZWFuKSA9PiB1bmtub3duKTogdm9pZCA9PiB7XHJcbiAgdXNlckRhdGFSZXF1ZXN0KClcclxuICAgIC50aGVuKChpc1VzZXJEYXRhKSA9PiB7XHJcbiAgICAgIGNhbGxiYWNrKG51bGwsIGlzVXNlckRhdGEpO1xyXG4gICAgfSlcclxuICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcclxuICAgICAgY2FsbGJhY2soZXJyb3IpO1xyXG4gICAgfSk7XHJcbn07XHJcblxyXG5jb25zdCBjYWxsYmFjazogZ2V0VXNlckRhdGFDYWxsYmFjayA9IChlcnJvciwgaXNVc2VyRGF0YSk6IHVzZXIgfCB2b2lkID0+IHtcclxuICBpZiAoZXJyb3IgPT0gbnVsbCAmJiBpc1VzZXJEYXRhID09IHRydWUpIHtcclxuICAgIGNvbnNvbGUubG9nKCdSZWFkIHN1Y2Nlc2Z1bGx5Jyk7XHJcbiAgICBjb25zdCBnZXRVc2VyID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2RlZmF1bHRVc2VyJyk7XHJcbiAgICBjb25zdCBkZWZhdWx0VXNlciA9IEpTT04ucGFyc2UoZ2V0VXNlcik7XHJcbiAgICByZXR1cm4gZGVmYXVsdFVzZXI7XHJcbiAgfSBlbHNlIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ1NvbWV0aGluZyB3ZW50IHdyb25nJywgZXJyb3IpO1xyXG4gIH1cclxufTtcclxuXHJcbi8vINCU0L7RgdGC0LDRkdC8INC40LfQsdGA0LDQvdC90L7QtSDQuNC3IGxvY2FsLXN0b3JhZ2UuINCvINC90LUg0L/RgNC40LTRg9C80LDQuyDRh9GC0L4g0YLRg9GCINCy0L7QvtCx0YnQtSDQtNC10LvQsNGC0YwsINC/0L7RjdGC0L7QvNGDINC/0YDQvtGB0YLQviDRgdC00LXQu9Cw0Lsg0LLRi9Cy0L7QtCDQsiDQutC+0L3RgdC+0LvRjFxyXG5jb25zdCBnZXRGYXZvdXJpdGVzQW1vdW50ID0gKCk6IGZhdm91cml0ZXNBbW91bnQgPT4ge1xyXG4gIGNvbnN0IGdldFVzZXJGYXZlcyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd1c2VyRmF2ZXMnKTtcclxuICBjb25zdCB1c2VyRmF2ZXMgPSBKU09OLnBhcnNlKGdldFVzZXJGYXZlcyk7XHJcbiAgY29uc29sZS5sb2coYNCjINGN0YLQvtCz0L4g0Y7Qt9C10YDQsCDQsiDQuNC30LHRgNCw0L3QvdC+0LwgJHt1c2VyRmF2ZXN9INGN0LvQtdC80LXQvdGC0L7QsmApO1xyXG4gIHJldHVybiB1c2VyRmF2ZXM7XHJcbn07XHJcblxyXG5nZXRVc2VyRGF0YShjYWxsYmFjayk7XHJcbmdldEZhdm91cml0ZXNBbW91bnQoKTtcclxuXHJcbi8vINCk0YPQvdC60YbQuNGPINGA0LXQvdC00LXRgNC40YHRjyDQvdCwINC+0YHQvdC+0LLQtSDRgdC+0LTQtdGA0LbQuNC80L7Qs9C+IGxvY2FsLXN0b3JhZ2VcclxuZXhwb3J0IGNvbnN0IHJlbmRlclVzZXJCbG9jayA9ICh1c2VyOiB1c2VyLCBmYXZlczogZmF2b3VyaXRlc0Ftb3VudCk6IHZvaWQgPT4ge1xyXG4gIGxldCBmYXZDYXB0aW9uOiBudW1iZXIgfCBzdHJpbmc7XHJcbiAgaWYgKGZhdmVzICE9IHVuZGVmaW5lZCkge1xyXG4gICAgZmF2Q2FwdGlvbiA9IGZhdmVzO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBmYXZDYXB0aW9uID0gJ9Cd0LjRh9C10LPQviDQvdC10YInO1xyXG4gIH1cclxuICBjb25zdCBoYXNGYXZJdGVtczogYm9vbGVhbiA9IGZhdmVzID4gMCA/IHRydWUgOiBmYWxzZTtcclxuICByZW5kZXJCbG9jayhcclxuICAgICd1c2VyLWJsb2NrJyxcclxuICAgIGBcclxuICAgICAgPGRpdiBjbGFzcz1cImhlYWRlci1jb250YWluZXJcIj5cclxuICAgICAgICA8aW1nIGNsYXNzPVwiYXZhdGFyXCIgc3JjPVwiL2ltZy8ke3VzZXIuYXZhdGFyVXJsfVwiIGFsdD1cIiR7dXNlci5uYW1lfVwiLz5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiaW5mb1wiPlxyXG4gICAgICAgICAgPHAgY2xhc3M9XCJuYW1lXCI+JHt1c2VyLm5hbWV9PC9wPlxyXG4gICAgICAgICAgPHAgY2xhc3M9XCJmYXZcIj5cclxuICAgICAgICAgICAgPGkgY2xhc3M9XCJoZWFydC1pY29uJHtoYXNGYXZJdGVtcyA/ICcgYWN0aXZlJyA6ICcgaW5hY3RpdmUnfVwiPjwvaT4ke2ZhdkNhcHRpb259XHJcbiAgICAgICAgICA8L3A+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgYFxyXG4gICk7XHJcbn07XHJcbiJdfQ==